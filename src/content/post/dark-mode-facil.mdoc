---
authors: ["luks"]
title: Modo noturno simples e efetivo
description: Hoje mostrarei como implementar modo noturno para sua p√°gina web de uma maneira √≥tima, o m√©todo apresentado √© o utilizado no AllTheCookies! 
thumbnail: {
  img: "@/assets/posts/dark-mode-facil/thumb.jpg",
  alt: Ilustra√ß√£o de noite e dia
}
publishDate: 2023-08-24T16:40:00Z
category: tutorials
tags: ["html/css", "web"]
draft: false
minutesRead: 7
edited: false
---

## Introdu√ß√£o

Ter um modo escuro na sua p√°gina web √© essencial para deixar ela mais acess√≠vel. Existem muitos m√©todos para implement√°-lo, neste tutorial irei ensinar como fazer isso por meio de CSS, atributos de elementos html e o m√≠nimo poss√≠vel de JavaScript!

## Planejamento

Antes de come√ßar a implementa√ß√£o, precisamos decidir exatamente como queremos que o nosso dark mode funcione. Sabendo disso, podemos delimitar algumas features b√°sicas que s√£o interessantes para nossa implementa√ß√£o ter:

N√£o haver a necessidade de utilizar classes diferentes para o modo claro e escuro;
Armazenamento do modo que o usu√°rio usou na √∫ltima se√ß√£o;
Se o usu√°rio est√° visitando a p√°gina pela primeira vez, utilizar prefer√™ncias do Browser se poss√≠vel;
Um bot√£o, obviamente.

Excelente, vamos l√°!

## Implementa√ß√£o do HTML, Cores e L√≥gica da Troca de Tema

Comecemos com um html b√°sico, com um bot√£o para fazer a troca de tema e um card para armazenar conte√∫do separado do resto do corpo da p√°gina:

```html
<button class="theme-toggle">‚òÄÔ∏è</button>
<div class="card">
  <h1 class="title-text">Coisas importantes</h1>
  <ul class="base-text">
	<li>Coisa importante 1</li>
	<li>Coisa importante 2</li>
	<li>Coisa importante 3</li>
  </ul>
</div>
```

Utilizar cores aleatoriamente por nosso CSS deixaria nossa interface de usu√°rio uma bagun√ßa. Logo, declaramos vari√°veis do CSS espec√≠ficas para cada parte do c√≥digo com `--nome` e as utilizaremos depois com `var(--nome)`. 


Agora vem a parte principal do nosso c√≥digo: definir vari√°veis CSS para cada tema com base no atributo ‚Äútheme‚Äù do elemento `<html>`. Para acessar o atributo de um elemento HTML, utilizamos a sintaxe `html[nomeAtributo=‚Äùalguma coisa‚Äù]`.

Vamos definir esse atributo com o valor ‚Äúlight‚Äù utilizando o seguinte c√≥digo JavaScript:

```javascript
document.firstElementChild.setAttribute("theme", ‚Äúlight‚Äù);
```

O objeto `document` representa nossa p√°gina web e, com o m√©todo `firstElementChild`, estamos acessando o primeiro elemento dele: o `<html>`! Ap√≥s isso, criamos o atributo com nosso valor desejado.

Gra√ßas a isso, finalmente podemos definir nossas vari√°veis CSS para cada tema (estarei usando as cores de um tema chamado Catppuccin):

```css
html[theme="light"] {
  --base: #eff1f5;
  --foreground: #dce0e8;
  --text: #4c4f69;
  --text-accent: #8839ef;
}
html[theme="dark"] {
  --base: #303446;
  --foreground: #232634;
  --text: #c6d0f5;
  --text-accent: #ca9ee6;
}
```

Por enquanto nossa p√°gina estar√° sempre no modo claro, visto que definimos o atributo `theme` para sempre usar o modo claro sem op√ß√£o de mud√°-lo.

Com nossas cores definidas, vamos melhorar um pouco nossa p√°gina! Deixaremos nossa Card mais destacada, aplicamos as cores aos textos e colocaremos nosso bot√£o na direita com posicionamento absoluto:

```css
body {
  background: var(--base);
}

.theme-toggle {
  font-size: 2rem;
  padding: 0.5rem;
  position: absolute;
  right: 2%;
  background: none;
  border: none;
  cursor: pointer;
}

.base-text {
  color: var(--text);
}

.title-text {
  font-size: 1.5rem;
  color: var(--text-accent);
}

.card {
  background: var(--foreground);
  width: fit-content;
  padding: 1.5rem;
  border-radius: .5rem;
}
```

Ufa, agora finalmente podemos come√ßar a implementar o funcionamento do nosso bot√£o!

## Implementa√ß√£o do Funcionamento do Bot√£o

Primeiramente, vamos definir uma vari√°vel booleana n√£o constante para guardar o estado atual do nosso tema. Al√©m disso, vamos tamb√©m usar `document.querySelector()` para termos acesso ao nosso bot√£o pelo JavaScript:

```javascript
let darkModeEstaAtivo = false;

const botao = document.querySelector(".theme-toggle");
```

Agora, implementaremos um procedimento para fazer a troca do tema sempre que necess√°rio. Para isso, ele precisa mudar para o modo escuro se estivermos no modo claro e mudar para o modo claro se estivermos no escuro. 

Faremos isso invertendo o valor atual do booleano que criamos e depois o atribu√≠remos ao nosso atributo ‚Äútheme‚Äù. Al√©m disso, trocaremos o √≠cone do sol para uma lua e vice-versa se necess√°rio:

```javascript
// procedimento de troca de tema
const trocaTema = () => {
  darkModeEstaAtivo = !darkModeEstaAtivo;
 
  document.firstElementChild.setAttribute("theme", darkModeEstaAtivo ? "dark" : "light");
  botao.textContent = darkModeEstaAtivo ? "üåö" : "‚òÄÔ∏è";
}
```

{% aside type="tip" title="Operador tern√°rio"  %}
O operador tern√°rio √© uma ferramenta √∫til para economizar linhas de c√≥digo que seriam ocupadas por if e else. Sua sintaxe √© a seguinte: 
`(booleano) ? (procedimento se booleano for verdadeiro) : (procedimento caso seja falso)`.
{% /aside %}

Agora que temos o procedimento para realizar a troca do tema, podemos criar um Event Listener para execut√°-lo sempre que o usu√°rio clicar no bot√£o:

```javascript
botao.addEventListener("click", trocaTema);
```

Finalmente podemos trocar o tema quando quisermos!

## Refletindo as prefer√™ncias do usu√°rio

O √∫nico que falta agora √© verificar as prefer√™ncias do usu√°rio e guardar o modo preferido dele para a pr√≥xima se√ß√£o. Para fazer esse √∫ltimo, precisamos adicionar a seguinte linha de c√≥digo no final do nosso procedimento trocaTema:

```javascript
localStorage.theme = darkModeEstaAtivo ? "dark" : "light";
```

Essa linha de c√≥digo armazena no navegador uma vari√°vel ‚Äútheme‚Äù com o valor ‚Äúdark‚Äù ou ‚Äúlight‚Äù dependendo do tema atual. Quando o usu√°rio acessar nossa p√°gina novamente, poderemos recuperar esse valor.

Agora criaremos um procedimento chamado ‚ÄúverificaPreferencia‚Äù, que ir√° fazer a recupera√ß√£o da vari√°vel ‚Äútheme‚Äù do armazenamento local do navegador. 

Caso o usu√°rio estiver acessando a p√°gina pela primeira vez, ele tamb√©m ir√° verificar se o m√©todo `window.matchMedia` √© acess√≠vel e, caso seja, ir√° olhar as prefer√™ncias do navegador do usu√°rio para ver se ele prefere o modo escuro.

```javascript
function verificaPreferencia() {
  const theme = localStorage.getItem("theme");
  if(theme !== null) {
	if(theme === "dark")
  	trocaTema();
    
	return;
  }
 
  if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
	trocaTema();
	return;
  }
}
```

## C√≥digo final

Com isso, implementamos um modo escuro funcional e que verifica as prefer√™ncias do usu√°rio! O c√≥digo final pode ser visto e executado abaixo:

{% codepen url="https://codepen.io/Luksb10/pen/abPbKVo" penName="Modo escuro simples e efetivo" / %}

